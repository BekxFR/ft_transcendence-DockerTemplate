version: '3.8'

services:
  postgres:
    container_name: postgres
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    # image: postgres:16.3
    restart: always
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres1
      POSTGRES_USER: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres1 -h postgres -p 5432"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s
    # env_file:
    #   - .env
    networks:
     - backend_network
    ports:
      - "5432:5432"
    volumes:
      - bdd:/var/lib/postgresql/data
  nestjs:
    depends_on:
      postgres:
        condition: service_healthy
    container_name: nest_backend
    build:
      context: ./docker/backend
      dockerfile: Dockerfile
      # Only will build development stage from our dockerfile
      target: development
    # Run a command against the development stage of the image
    command: 
      - /bin/sh
      - -c
      - | 
        npx prisma migrate dev --name init
        npx prisma generate
        npm run start:dev
    # env_file:
    #   - .env
    networks:
     - backend_network
    ports:
      - 3000:3000
    restart: on-failure
    # volumes:
    #   - ./nest-template:/usr/src/app
  nextjs:
    depends_on:
      postgres:
        condition: service_healthy
    container_name: next_frontend
    build:
      context: ./docker/frontend
      dockerfile: Dockerfile
      target: other
    command: npm run dev
    # env_file:
    #   - .env
    networks:
      - frontend_network
    ports:
      - 3001:3001
    restart: on-failure
    # volumes:
    #   - nextjs:/usr/src/app
    # env_file:
    #   - .env
  nginx:
    container_name: nginx
    depends_on:
      - nestjs
      - nextjs
    build:
      context: ./docker/nginx/
      dockerfile: Dockerfile
    networks:
      - nginx_dmz_network
      - frontend_network
      - backend_network
    ports:
      - 8080:8080
    restart: unless-stopped

# default network = bridge
networks: 
  nginx_dmz_network:
    name: nginx_dmz_network
  frontend_network:
    name: frontend_network
  backend_network:
    name: backend_network

volumes:
  bdd:
    driver: local # default local = /var/lib/docker/volumes but in school its /goinfre/chillion/docker/volumes/
    name: postgres # volume name = /goinfre/chillion/docker/volumes/postgres

  # adminer:
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080

  # doc : https://hub.docker.com/_/postgres
  # POSTGRES_USER
  # POSTGRES_PASSWORD
  # POSTGRES_DB - default DB Name POSTGRES_USER
  # POSTGRES_INITDB_ARGS - Facultatif - permet l'envoie d'arguments a postgres initdb ex : -e POSTGRES_INITDB_ARGS="--data-checksums"
  # POSTGRES_INITDB_WALDIR - Facultatif - permet de definir un autre emplacement du journal des transactions - default in subfolder PGDATA
  # POSTGRES_HOST_AUTH_METHOD - Facultatif - permet de controler les auth-method connexions host, bases, users et adresses - default scram-sha-256 - in no init db echo "host all all all $POSTGRES_HOST_AUTH_METHOD" >> pg_hba.conf
  # PGDATA - Facultatif - define another location - like a subdirectory - for the database files - Default /var/lib/postgresql/data
  # ex : docker run -d --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -e PGDATA=/var/lib/postgresql/data/pgdata -v /custom/mount:/var/lib/postgresql/data postgres
  # variables d'environnement postgres : https://www.postgresql.org/docs/14/libpq-envars.html

